Comandos Principales para Trabajar con docker  y docker-compose :

https://clouding.io/kb/trabajando-con-imagenes-en-docker/  Documentacion para revisar
https://www.muylinux.com/2016/04/19/tutorial-docker/

Instalar Docker desde un scrip simplificado.

curl -sSL https://get.docker.com/ | sh        *Instalamos el docker el scrip esta en get.docker.com
**********Si cutiene Cuenta en Docker hub para subir bajar y administrar Imagenes **********
docker login                                  *Accesa a Cuenta de docker hub nos pide Useuario y contraseña
docker tag mi_imagen lojanet/mi_imagen         *Se cambia el nombre de la imagen a subir con uns con indicación a nuestro repositorio
docker rmi mi-imagen                          *Podemos borrar la imagen antigua para liberar espacio
docker push lojanet/mi_imagen                 *Subimos la imagen a nuestra cuenta de docker hub (lojanet/mi_imagen)
docker pull lojanet/mi_imagen                 *bajar una imagen a nuestra computador
*****************
sudo usermod -aG docker SU_USUARIO            *Da privilegios SU_USUARIO para ejecutar docker como root (sin anteponer SUDO)

docker info                                   *Información de Imagenes, Contenedores y versiones que estan en nuestra maquina
docker ps -a                                  *para saber que contenedores se estan ejecutando -a se puede ver el estado del contenedor
docker search UBUNTU                          *Buscar imagenes UBUNTU en repositorio Git Docker
ddocker pull <imagen>:<version>               *Descarga imagen ejemplo UBUNTU:14.04
docker images                                 * Visualiza imagenes descargadas
docker run <imagen>:<version>                 * Crea el contenedor atravez de la imagen
docker run -i -t b72889fa879c /bin/bash       * Ingresa dentro del Contenedor para hacer cualquier modificación (b7288...=ID, o por nombre)
docker run -u 0 -i -t ubuntu:14.04 /bin/bash  *Es igual al anterior  CON -u 0 puede ejecutar como usuario root dentro del docker
docker tag b72889fa879c oldlts:latest         * Pone una etiqueta al contenedor para entrar de forma mas organzada
docker run -i -t oldlts:latest /bin/bash      * Se Ingresa a la misma imagen mediante la Etiqueta asignada en el paso anterior
                                              * Cada vez que se ejecuta el RUN se crea un nuevo contenedor se puede ver con docker ps -a
exit   ó Ctrl-D                               * Salir del contenedor pero se deja de ejecutar el Contenedor
Ctrl +P+Q                                     * Sale sin dejar de ejecutar el contenedor
docker start -a CONTENEDOR                    * Ejecuta contenedor pero se puede ver como actua 
docker commit <imagen>:<version>              *Guarda Cambios echos al contenedor para que persitan en el mismo
docker commit ef7e107e0aae new_ubuntu:14.04   *Guardar un contenedor modificado se guarda la imagen nueva
docker stop CONTENEDOR                        * parar a ejecucion del contenedor
docker attach CONTENEDOR                      *accede a un contenedor
docker rm CONTENEDOR                          *Borra un Contenedor (sin que este ejecutandoce)
docker rmi IMAGEN                             *Borra una Imagen (sin que este siendo usada) otra forma ** docker image rm IMAGEN
docker rm $(sudo docker ps -a -q)             *Borra cambios o contenedores creados por modificaciones y que no queremos que persistan
docker exec -i -t CONTENEDOR ls               *Ejecuta ls dentro del contenedor  -u 0 puede ejecutar como usuario root dentro del docker
docker save <imagen>   >  <archivo>.tar       *Graba la Imagen a un archivo .Tar para poder copiarlo a otra maquina
docker load < <archivo>.tar                   *Permite cargar una imagen desde archivo .tar

********Gestion de Volumenes*********** en “/var/lib/docker/volumes” creará una carpeta para cada contenedor

docker volume create mis_datos              * crea volumen  “/var/lib/docker/volumes/mis_datos/_data”
docker volume inspect mis_datos             * para ver propiedades del Volumen
docker volume rm mis_datos                  * Borrar volumen Solo Sí se borro con anterioridad el Contenedor
docker volume prune                         * Borra los volumenes que no esta siendo usados por contenedores

                          ****Podemos crear un volúmen que sea usado por varios servidores webs mediante el parámetro “service”,
                          ****solo se pueden montar volúmenes usando la sintaxis “–mount” en lugar del “-v”.
  docker service create -d --replicas=4 --name web-service --mount source=mis_datos,target=/app ubuntu:17.10
  docker service ps               *para ver el servicio
  docker service rm web-service   *Borrar ese servicio
  docker run -d -it --name ubu1 -v mis_datos:/var/lib/mysql:ro ubuntu:17.10       * Volumen solo de lectura (se agrega :ro)
  docker run -d -it --name ubu3 --tmpfs /var/html/tempo ubuntu:17.10              *volumen temporal en RAM, se borra al salir de docker --tmpfs
  
  
docker ps                                   * optiene info del contenedor ejemplo id del contenedor: d8e703d7e303
docker inspect -f  '{{.Id}}' d8e703d7e303   * optiene info volumen ejemplo: d8e703d7e3039a6df6d01bd7fb58d1882e592a85059eb16c4b83cf91847f88e5
sudo cp file.txt /var/lib/docker/aufs/mnt/**d8e703d7e3039a6df6d01bd7fb58d1882e592a85059eb16c4b83cf91847f88e5**/root/file.txt   * copia dentro de volumen
docker run -i ubunt_u /bin/bash -c 'cat > file.txt' < file.txt        * otra forma fea pero funciona

docker cp {SOURCE_FILE} {DESTINATION_CONTAINER_ID}:/{DESTINATION_PATH} * forma muy común

****Otra solución es usar scp ****** con Ifconfig se ve el ip del contenedor ******** util si desea copiar directorio.
scp FILE_PATH_ON_YOUR_HOST IP_CONTAINER:DESTINATION_PATH   *ejemplo: scp -r directory 172.17.0.2:directory
                                                           * Asegúrese de instalar ssh en su contenedor también.
                                                           * apt-get install openssh-server
                                                           
**********CREAR UNA IMAGEN DOCKER DESDE EL INICIO ***EJEMPLO POSTFIX que es sevidor de emails******
sudo su             *se inicia como root para tener los permisos  de escritura
docker run -i -t Ibase /bin/bash     *Se crea imagen base "Ibase" y se ingresa al shell
apt-get update               * Se actualiza el sistema base
apt-get install -y postfix   * Se instala la aplicación que se requiere "POSTFIX" se sigue los pasos ejem. selecciono Internet, y dominio
exit                         *Saldo del contenedor
docker ps -a                 *listo los contenedores que se ejecutaron para obtener el ID (primera columna) del que recien cree.
docker commit 3fcr9990345  lojanet/postfix     *Guardar contenedor con ID:3fcr9990345 en nueva imagen (lojanet:cuenta de docker, postfix:nombre imagen) 
docker run -i -t lojanet/postfix /bin/bash     *Ingresamos dentro de la imagen para verificar que esta corriendo
postfix start                *Iniciamos el servicio o verificamos que este corriendo y luego salimos con exit
docker push lojanet/postfix   *Para grabar y publicar en la cuenta de docker para poder hacer publico y reutilizar la imagen
*****************************************************************************************************







